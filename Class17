use sakila;

select a.address, a.postal_code, c.city, co.country
from address a
inner join city c on (a.city_id = c.city_id)
inner join country co on (c.country_id = co.country_id)
where a.postal_code not in ('12345', '67890');

create index idx_postal_code on address(postal_code);

#Con índice: Al implementar un índice en postal_code, la base de datos puede realizar búsquedas más rápidas en esa columna, ya que el índice ofrece un método más eficiente para localizar las filas pertinentes, lo que típicamente disminuye el tiempo de ejecución.
#Sin índice: La búsqueda en columnas que no tienen índices (como postal_code) es más lenta, ya que la base de datos debe revisar cada fila individualmente para encontrar coincidencias.


select * from actor 
where first_name like "%A";
select * from actor 
where last_name like "%A";

#Si las columnas first_name o last_name no cuentan con índices, la búsqueda será más lenta porque la base de datos tendrá que examinar todas las filas. En cambio, si hay un índice en alguna de estas columnas, la búsqueda se realizará de manera considerablemente más rápida, ya que el índice funciona como una referencia que facilita la localización de las filas coincidentes de manera más eficiente.

select * from film
where description like '%adventure%';
select * from film_text
where match(description) against('adventure');

#MATCH() AGAINST() es más rápido y eficiente que LIKE, especialmente cuando se trabaja con grandes volúmenes de datos de texto.

#Alumno Asis Tomas 7C
